<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ubuntu配置</title>
    <link href="/2021/10/31/ubuntu%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/10/31/ubuntu%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><blockquote><p>文件位置/etc/apt/sources.list</p></blockquote><ol><li>备份</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup<br></code></pre></td></tr></table></figure><ol start="2"><li>打开sources.list文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><ol start="3"><li>删除原来内容，替换为以下内容</li></ol><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-params">#</span>阿里云镜像<br><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><ol start="4"><li>更新</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><h2 id="取消sudo密码"><a href="#取消sudo密码" class="headerlink" title="取消sudo密码"></a>取消sudo密码</h2><blockquote><p>文件位置 /etc/sudoers</p></blockquote><ol><li>打开文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/sudoers<br></code></pre></td></tr></table></figure><ol start="2"><li>添加如下内容</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">includedir /etc/sudoers.d</span><br>admin ALL=(ALL)  NOPASSWD:ALL<br>you_name ALL=(ALL) NOPASSWD:ALL<br></code></pre></td></tr></table></figure><ol start="3"><li>强制退出，wq!</li></ol><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>以zsh主题为例</p><ol><li>查看当前有什么主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/shells<br></code></pre></td></tr></table></figure><ol start="2"><li>安装zsh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install zsh<br></code></pre></td></tr></table></figure><ol start="3"><li>更换当前主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><ol start="4"><li>安装git</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git<br></code></pre></td></tr></table></figure><ol start="5"><li>安装oh-my-zsh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;<br></code></pre></td></tr></table></figure><ol start="6"><li>更换自己喜欢的主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim ~/.zshrc<br><span class="hljs-meta">#</span><span class="bash">更改 ZSH_THEME=<span class="hljs-string">&quot;robbyrussell&quot;</span></span><br>ZSH_THEME=&quot;y&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的集合问题</title>
    <link href="/2021/06/28/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/28/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List-、Set、Map"><a href="#List-、Set、Map" class="headerlink" title="List 、Set、Map"></a>List 、Set、Map</h3><ul><li>List：有序（存取元素有序）</li><li>Set：无序，不重复</li><li>Map：键值对，key不能重复</li></ul><h3 id="ArrayList-、LinkedList"><a href="#ArrayList-、LinkedList" class="headerlink" title="ArrayList 、LinkedList"></a>ArrayList 、LinkedList</h3><ul><li>底层实现：ArrayList 是数组；LinkedLsit是链表</li><li>对于index索引数据：ArrayList 直接定位；LinkedList则需要遍历</li><li>对于随机插入和删除：ArrayList需要移动目标的后面节点；LinkedList则只需要修改前后节点的属性</li><li>对于顺序插入和删除：ArrayList不需要移动节点；比LinkedList效率上高</li></ul><p>总结：需要有大量的插入和删除操作，选择LinkedList；需要很多查找操作，插入和删除操作较少，则选择ArrayList</p><h3 id="ArrayList-、Vector"><a href="#ArrayList-、Vector" class="headerlink" title="ArrayList 、Vector"></a>ArrayList 、Vector</h3><p>Vector在方法上加了synchronized来确保线程安全，其他多差不多</p><h3 id="HashMap的底层数据结构"><a href="#HashMap的底层数据结构" class="headerlink" title="HashMap的底层数据结构"></a>HashMap的底层数据结构</h3><p>在 jdk 1.8 之前都是“数组+链表”，在 jdk 1.8之后都是”数组+链表+红黑树”；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//负载因子</span><br>DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span><br></code></pre></td></tr></table></figure><h4 id="为什么改成”数组-链表-红黑树”"><a href="#为什么改成”数组-链表-红黑树”" class="headerlink" title="为什么改成”数组+链表+红黑树”"></a>为什么改成”数组+链表+红黑树”</h4><p>主要为了解决hash冲突严重时（链表过长）的查找性能，使用链表的查找性能O(n)，使用红黑树的查找性能时O(log n)</p><h4 id="什么时候用链表，什么时候用红黑树"><a href="#什么时候用链表，什么时候用红黑树" class="headerlink" title="什么时候用链表，什么时候用红黑树"></a>什么时候用链表，什么时候用红黑树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//阈值</span><br>TREEIFY_THRESHOLD = <span class="hljs-number">8</span>;<br>UNTREEIFY_THRESHOLD = <span class="hljs-number">6</span>;<br><span class="hljs-comment">//时间和空间的权衡</span><br></code></pre></td></tr></table></figure><h4 id="threshold用途"><a href="#threshold用途" class="headerlink" title="threshold用途"></a>threshold用途</h4><p>存放扩容阈值；（容量 * 负载因子）</p><h4 id="HashMap容量"><a href="#HashMap容量" class="headerlink" title="HashMap容量"></a>HashMap容量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><span class="hljs-comment">//最小容量为2的N次方</span><br></code></pre></td></tr></table></figure><h4 id="HashMap计算hashCode方法"><a href="#HashMap计算hashCode方法" class="headerlink" title="HashMap计算hashCode方法"></a>HashMap计算hashCode方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> (key == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br><span class="hljs-comment">//^是异或</span><br></code></pre></td></tr></table></figure><p>当数组的长度很短时，只有低位数的hashcode值能参与运算。而让高16位参与运算可以更好的均匀散列，减少碰撞，进一步降低hash冲突的几率。并且使得高16位和低16位的信息都被保留了</p><h4 id="jdk-1-8之前为什么会出现死循环"><a href="#jdk-1-8之前为什么会出现死循环" class="headerlink" title="jdk 1.8之前为什么会出现死循环"></a>jdk 1.8之前为什么会出现死循环</h4><p>jdk 1.7 扩容采用的是”头插法”，会导致同一个索引位置的节点在扩容后顺序反掉。jkd 1.8采用的是“尾插法”</p><h3 id="HashMap-和-Hashtable"><a href="#HashMap-和-Hashtable" class="headerlink" title="HashMap 和 Hashtable"></a>HashMap 和 Hashtable</h3><ol><li>Hashtable是线程安全，它在方法上都加了synchronized来保证线程安全；HashMap不是线程安全</li><li>Hashtable的初始容量是11；HashMap的初始容量为16；</li><li>Hashtable的扩容为2的N倍 + 1；HashMap的容量始终问2 的指数</li><li>Hashtable继承的类是Dictionary；HashMap继承的是AbstractMap</li><li>Hashtable是创建时就初始化；HashMap是第一次put时初始化</li><li>Hashtable的key和value不允许为空；HashMap可以</li><li>Hashtable的hash值是key.hashCode()算出来的；HashMap的hash是重新计算过的</li><li>HashMap去掉了 Hashtable 中的contains方法</li></ol><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>数据结构：jdk 1.7 采用 分段的数组 + 链表；jdk 1.8 采用 数组 + 链表 + 红黑树</p><p>线程安全：jdk 1.7 采用分段锁 ；jdk 1.8 采用synchronized + CAS (比较并交换)</p><h3 id="Comparable-和-Comparator"><a href="#Comparable-和-Comparator" class="headerlink" title="Comparable 和 Comparator"></a>Comparable 和 Comparator</h3><p>Comparable是自然排序接口；Comparator是比较排序器</p><h3 id="Collection-和-Collections"><a href="#Collection-和-Collections" class="headerlink" title="Collection 和 Collections"></a>Collection 和 Collections</h3><p>Collection是集合类的一个顶级接口；</p><p>Collections是集合类的一个工具类/帮助类，提供一系列静态方法</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM垃圾回收机制(GC)</title>
    <link href="/2021/06/27/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-GC/"/>
    <url>/2021/06/27/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-GC/</url>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><h3 id="判断对象是否已死"><a href="#判断对象是否已死" class="headerlink" title="判断对象是否已死"></a>判断对象是否已死</h3><ul><li><p><strong>引用计数算法</strong>：在对象中添加一个引用计数器，在被引用的时候就加一，当引用失效时，就减一；当引用计数器为0时就是代表该对象不会在被引用。缺点：无法解决对象之间的相互引用问题。</p></li><li><p><strong>可达性分析算法</strong>：从根节点集合”GC Root Set” 开始，根据引用关系向下搜索，搜索过程的路径称为”引用链”，无法到达的就意味着是垃圾。</p></li></ul><p>固定可作为GC Roots的对象包括：</p><ol><li>栈帧中的本地变量表中引用的对象；</li><li>方法区中类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI引用的对象；</li><li>Java虚拟机内部的引用；</li><li>所有被同步锁（synchronized）持有的对象；</li><li>反应Java虚拟机内部情况JMXBean、JVMTI中注册的回调、本地代码缓存等。</li></ol><h3 id="引用（reference）"><a href="#引用（reference）" class="headerlink" title="引用（reference）"></a>引用（reference）</h3><ul><li>强引用：普遍存在的引用赋值，只要引用关系还在，GC 永远不会回收被引用的对象,eg:” Object obj = new Object( )  “；</li><li>软引用：一些有用，但非必须的对象，会在内存溢出之前，被列入第二次回收对象列中；</li><li>弱引用：描述那些非必须的对象，强度比软引用更弱一点，只能存活到下一次垃圾收集发生之前；</li><li>虚引用：最弱的一种引用关系，为对象设置该引用唯一目的是为了在这个对象被GC回收时收到一个系统通知。 虚引用必须和引用队列（ReferenceQueue）联合使用</li></ul><h3 id="堆内存常见的分配策略"><a href="#堆内存常见的分配策略" class="headerlink" title="堆内存常见的分配策略"></a>堆内存常见的分配策略</h3><ul><li>对象优先进入Eden区分配<ul><li>当Eden内存几乎被分配完全了，如果此时再为其他的对象分配内存，虚拟机就会发起一次Minor GC,如果之前的对象无法存入幸存区，只能通过<strong>分配担保机制</strong>将新生代的对象提前转移到老年代中</li></ul></li><li>大对象直接进入老年代<ul><li>为什么要这样——为了避免大对象分配内存由于分配担保机制带来的复制导致降低效率</li></ul></li><li>长期存活的对象进入老年代<ul><li>虚拟机给每个对象一个对象年龄(Age) 计数器</li></ul></li></ul><h3 id="生存后死亡"><a href="#生存后死亡" class="headerlink" title="生存后死亡"></a>生存后死亡</h3><p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。</p><p>被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p><h3 id="如何判断一个常量是废弃常量"><a href="#如何判断一个常量是废弃常量" class="headerlink" title="如何判断一个常量是废弃常量"></a>如何判断一个常量是废弃常量</h3><p>运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢?</p><p>假如在常量池中存在字符串”abc” ,如果当前没有任何String对象引用该字符串常量的话，就说明常量”abc”就是废弃常量,如果这时发生内存回收的话而且有必要的话，” abc”就会被系统清理出常量池。</p><h3 id="如何判断一个类是无用的类"><a href="#如何判断一个类是无用的类" class="headerlink" title="如何判断一个类是无用的类"></a>如何判断一个类是无用的类</h3><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p><p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 <strong>“无用的类”</strong> ：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h4><p>分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。</p><ul><li><p>部分收集（Partial GC）</p><ul><li>新生代收集（Minor GC/Young GC）</li><li>老年代收集（Major GC/Old GC）</li><li>混合收集（Mixed GC）        </li></ul></li><li><p>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集</p></li></ul><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>标记阶段是把所有活动对象（可达对象，reachable）都做上标记的阶段。 清除阶段是把那些没有标记的对象，也就是非活动对象回收的阶段。</p><p>缺点：</p><ul><li>执行效率不稳定</li><li>内存空间碎片化问题</li></ul><h4 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h4><p>它将内存按容量分为大小相等的两块，每次只使用其中的一块（对象面），当这一块的内存用完了，就将还存活着的对象复制到另外一块内存上面（空闲面），然后再把已使用过的内存空间一次清理掉。</p><p>缺点：</p><ul><li>内存缩小一半，空间浪费太多</li></ul><h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存</p><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>![](/img/picture/2021-7-16 1-0.png)</p><p>![](/img/picture/2021-7-16 1-1.png)</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM类加载机制</title>
    <link href="/2021/06/27/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/06/27/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="类的加载时机（触发条件）"><a href="#类的加载时机（触发条件）" class="headerlink" title="类的加载时机（触发条件）"></a>类的加载时机（触发条件）</h3><ul><li>使用new关键字实例化对象</li><li>读取或设置一个类型的静态字段</li><li>调用一个类型的静态方法的时候</li><li>反射（使用java.lang.reflect包的方法对类型进行反射调用）</li><li>初始化一个类的子类（会首先初始子类的父类）</li><li>JVM启动标明的启动类，即文件名和类名相同的那个类</li></ul><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><ul><li>加载 (Loading)</li><li>验证(Verification)</li><li>准备(Preparation)</li><li>解析(Resoultion)</li><li>初始化(Initialization)</li><li>使用(Using)</li><li>卸载(UnLoading)</li></ul><p>注意：静态变量在准备阶段只进行创建；静态常量在准备阶段就会进行初始化</p><h3 id="类的加载器-ClassLoader"><a href="#类的加载器-ClassLoader" class="headerlink" title="类的加载器(ClassLoader)"></a>类的加载器(ClassLoader)</h3><ul><li>启动类加载器( Bootstrap )：加载存放在lib目录下的jar包、或被-Xbootclasspath参数指定指向的路径中存放的jar包</li><li>扩展类加载器( Extension )：加载lib\ext下的jar包</li><li>应用程序类加载器( Application )：加载用户类路径（ClassPath）上所有类库</li><li>自定义类加载器( Custom )：继承classLoader，重写findClass方法</li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>简单的来说，类加载器永远要先请示上级，上级会请示它的上级，除非所有上级都做不了，这件事才轮到你来</p><p>加载过程</p><p><img src="/img/picture/ClassLoader.png"></p><p><strong>不可重写String类</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM内存结构</title>
    <link href="/2021/06/27/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <url>/2021/06/27/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><h3 id="JVM-运行时内存结构图"><a href="#JVM-运行时内存结构图" class="headerlink" title="JVM 运行时内存结构图"></a>JVM 运行时内存结构图</h3><p><img src="/img/picture/JVM-1.png"></p><p>所有线程共享：</p><ul><li><p>方法区（Method Area)：也叫元空间，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存的数据【<strong>运行时的常量池也是方法区的一部分</strong>】</p><p><img src="/img/picture/method-1.png"></p></li><li><p>堆区（Heap Area）：占的最大，存放Java<strong>对象的实例</strong></p></li></ul><p>线程私有（线程独立）：</p><ul><li><p>栈区（Stack Area)：每个方法被执行的时候，都会同步创建一个<strong>栈帧</strong>（Stack Frame）用于存储<strong>局部变量表、操作数栈</strong>、动态连接、方法出口等</p><p><img src="/img/picture/Stack-1.png"></p></li><li><p>程序计数器（Program Counter Register）：一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器</p></li><li><p>本地方法栈（Native Method Area）：调用本地方法，和栈区通过本地方法接口（JNI）通信</p></li></ul><h3 id="堆区（Heap-Area"><a href="#堆区（Heap-Area" class="headerlink" title="堆区（Heap Area)"></a>堆区（Heap Area)</h3><ul><li>新生代（Young）：又分伊甸区（Eden)、两个幸存区（From Survivor, To  Survivor)</li><li>老年代（Old）：</li></ul><p><img src="/img/picture/Heap-1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现栈</title>
    <link href="/2021/06/24/Java%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <url>/2021/06/24/Java%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h2 id="实现栈的两种方法"><a href="#实现栈的两种方法" class="headerlink" title="实现栈的两种方法"></a>实现栈的两种方法</h2><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/24 15:26</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//数组实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] elem;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bottom;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> usedSize;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.elem = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>    &#125;<br><br>    <span class="hljs-comment">//print</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; usedSize; i++) &#123;<br>            System.out.print(elem[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br><br>    <span class="hljs-comment">//扩容</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSize</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.elem = Arrays.copyOf(<span class="hljs-keyword">this</span>.elem, <span class="hljs-keyword">this</span>.elem.length * <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否满了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.elem.length==usedSize;<br>    &#125;<br><br>    <span class="hljs-comment">//push</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            addSize();<br>        &#125;<br>        <span class="hljs-keyword">this</span>.elem[usedSize] = val;<br>        <span class="hljs-keyword">this</span>.usedSize++;<br>        <span class="hljs-keyword">this</span>.top++;<br>    &#125;<br><br>    <span class="hljs-comment">//pop</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.top &lt; <span class="hljs-keyword">this</span>.bottom) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.top = <span class="hljs-keyword">this</span>.top - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">this</span>.usedSize = <span class="hljs-keyword">this</span>.usedSize - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.elem[<span class="hljs-keyword">this</span>.usedSize];<br>    &#125;<br><br>    <span class="hljs-comment">//peek</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.elem[<span class="hljs-keyword">this</span>.usedSize - <span class="hljs-number">1</span>];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/24 16:00</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyStack stack = <span class="hljs-keyword">new</span> MyStack();<br>        stack.push(<span class="hljs-number">89</span>);<br>        stack.push(<span class="hljs-number">90</span>);<br>        stack.push(<span class="hljs-number">91</span>);<br>        stack.print();<br>        System.out.println(stack.pop());<br>        stack.print();<br>        System.out.println(stack.peek());<br>        stack.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">89</span> <span class="hljs-number">90</span> <span class="hljs-number">91</span> <br><span class="hljs-number">91</span><br><span class="hljs-number">89</span> <span class="hljs-number">90</span> <br><span class="hljs-number">90</span><br><span class="hljs-number">89</span> <span class="hljs-number">90</span> <br></code></pre></td></tr></table></figure><h3 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h3><p>注：我直接使用java中类去实现的</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><span class="hljs-comment">//不建议直接使用Stack类，它属于进程安全类</span><br></code></pre></td></tr></table></figure><h4 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        stack.push(<span class="hljs-number">34</span>);<br>        stack.push(<span class="hljs-number">56</span>);<br>        stack.push(<span class="hljs-number">89</span>);<br>        System.out.println(stack.pop());<br>        System.out.println(stack.peek());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">89</span><br><span class="hljs-number">56</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows10更新问题</title>
    <link href="/2021/06/24/Windows10%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/24/Windows10%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="windows10更新问题"><a href="#windows10更新问题" class="headerlink" title="windows10更新问题"></a>windows10更新问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>1、在设置中进行质量或其他更新，重启后在更新配置到99%是，提示无法更新，然后撤销更改；</p><p>2、使用易升或更新程序（MediaCreationTool****.exe）更新，提示：“抱歉，我们很难确定你的电脑能否运行Windows 10，请关闭安装程序，然后再试一次。”；如下图。</p><p><img src="/img/picture/%E9%97%AE%E9%A2%98%E6%88%AA%E5%9B%BE.jpg" alt="问题截图"></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>（不一定能解决，只适用特定情况）</p><p>1、将C盘空余出40G以上的可用空间（有时20G都不够原因是系统要保留原有系统备份、解压等）</p><p>2、win+R 输入msconfig 按回车，选择引导，正常的如下图</p><p><img src="/img/picture/windows10-2.png" alt="windows10引导"></p><p>如果为空白，会报不能此电脑是否运行的系统，是因为运行msconfig，在引导页中是空白的，看不到引导的系统（但是电脑是正常可以开机的）；造成的原因可能是你最近装过双系统。</p><p>3、修复引导，需要一个PE系统的U盘。（网上有很多PE的制作教程）</p><p>4、进入PE系统，打开DiskGenius，如下图</p><p><img src="/img/picture/windows10-3.png" alt="DiskGenius"></p><p>你的可能名字不叫ESP，可能叫分区0或其他的名称，使用DiskGenius指定盘符为x或其它可用盘符。</p><p>查看你的分区类型</p><p><img src="/img/picture/windows10-4.png" alt="DiskGenius"></p><p>我的是GPT，你的可能是MBR</p><p>5、打开PE系统的Windows10引导修复软件</p><p>a、GPT：选择 uefi  ，选择挂载地方（x盘，刚刚指定的盘符）点击修复</p><p>注：以上操作仅在我自己出问题的笔记本上操作有效，注意备份数据。</p>]]></content>
    
    
    <categories>
      
      <category>windows10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows10</tag>
      
      <tag>windows10更新问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现单链表</title>
    <link href="/2021/06/23/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/06/23/Java%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="单链表代码实现："><a href="#单链表代码实现：" class="headerlink" title="单链表代码实现："></a>单链表代码实现：</h2><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/23 21:53</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>    <span class="hljs-comment">//设置头节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ListNode head = <span class="hljs-keyword">new</span> ListNode();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> val;<br>    <span class="hljs-keyword">private</span> ListNode next;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">()</span> </span>&#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.val = val;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val, ListNode next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.val = val;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br><br>    <span class="hljs-comment">//size</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        ListNode temp = head;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-keyword">null</span>)&#123;<br>            temp = temp.next;<br>            len++;<br>        &#125;<br><span class="hljs-comment">//        System.out.println(len);</span><br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br><br>    <span class="hljs-comment">//print</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        ListNode temp = head.next;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-keyword">null</span>)&#123;<br>            System.out.print(temp.val+<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>            temp = temp.next;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;null&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//add</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        ListNode newNode = <span class="hljs-keyword">new</span> ListNode(val);<br>        ListNode temp = head;<br>        <span class="hljs-keyword">while</span>(temp.next!=<span class="hljs-keyword">null</span>)&#123;<br>            temp = temp.next;<br>        &#125;<br>        temp.next = newNode;<br>    &#125;<br><br>    <span class="hljs-comment">//addindex</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;size() &amp;&amp; index &lt;=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;不合法&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ListNode newNode = <span class="hljs-keyword">new</span> ListNode(val);<br>        ListNode temp = head;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; index; i++) &#123;<br>            temp = temp.next;<br>        &#125;<br>        ListNode nextNode = temp.next;<br>        temp.next = newNode;<br>        newNode.next = nextNode;<br>    &#125;<br><br>    <span class="hljs-comment">//deleted</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;size() &amp;&amp; index &lt;=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;不合法&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ListNode cur = head;<br>        ListNode prev = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            prev = cur;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(prev==<span class="hljs-keyword">null</span>) head.next = cur.next;<br>        <span class="hljs-keyword">else</span> &#123;<br>            prev.next = cur.next;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//select</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        ListNode temp = head;<br>        <span class="hljs-keyword">while</span> (temp!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(temp.val == val) &#123;<br>                System.out.println(<span class="hljs-string">&quot;包含&quot;</span>+val);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;不包含&quot;</span>+val);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/23 21:54</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ListNode head = <span class="hljs-keyword">new</span> ListNode();<br>        head.print();<br>        head.add(<span class="hljs-number">7</span>);<br>        head.print();<br>        head.add(<span class="hljs-number">8</span>);<br>        head.print();<br>        head.add(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<br>        head.print();<br>        head.contain(<span class="hljs-number">6</span>);<br>        head.print();<br>        head.del(<span class="hljs-number">1</span>);<br>        head.contain(<span class="hljs-number">6</span>);<br>        head.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">null</span><br><span class="hljs-number">7</span>-&gt;<span class="hljs-keyword">null</span><br><span class="hljs-number">7</span>-&gt;<span class="hljs-number">8</span>-&gt;<span class="hljs-keyword">null</span><br><span class="hljs-number">6</span>-&gt;<span class="hljs-number">7</span>-&gt;<span class="hljs-number">8</span>-&gt;<span class="hljs-keyword">null</span><br>包含<span class="hljs-number">6</span><br><span class="hljs-number">6</span>-&gt;<span class="hljs-number">7</span>-&gt;<span class="hljs-number">8</span>-&gt;<span class="hljs-keyword">null</span><br>不包含<span class="hljs-number">6</span><br><span class="hljs-number">7</span>-&gt;<span class="hljs-number">8</span>-&gt;<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h3 id="Java自带类实现-LinkedList"><a href="#Java自带类实现-LinkedList" class="headerlink" title="Java自带类实现(LinkedList)"></a>Java自带类实现(LinkedList)</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/24 14:53</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        LinkedList&lt;Integer&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        linkedList.add(<span class="hljs-number">23</span>);<br>        linkedList.add(<span class="hljs-number">45</span>);<br>        linkedList.add(<span class="hljs-number">56</span>);<br>        linkedList.add(<span class="hljs-number">1</span>,<span class="hljs-number">35</span>);<br>        linkedList.remove(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (Integer integer : linkedList) &#123;<br>            System.out.println(integer);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">null</span><br><span class="hljs-number">23</span>-&gt;<span class="hljs-number">35</span>-&gt;<span class="hljs-number">45</span>-&gt;<span class="hljs-number">56</span>-&gt;<span class="hljs-keyword">null</span><br><span class="hljs-number">35</span>-&gt;<span class="hljs-number">45</span>-&gt;<span class="hljs-number">56</span>-&gt;<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性表</tag>
      
      <tag>单链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现顺序表</title>
    <link href="/2021/06/23/Java%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <url>/2021/06/23/Java%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="顺序表代码实现：-数组实现"><a href="#顺序表代码实现：-数组实现" class="headerlink" title="顺序表代码实现：(数组实现)"></a>顺序表代码实现：(数组实现)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/23 17:49</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SequenceList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] elem;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> usedSize;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SequenceList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.elem = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SequenceList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.elem = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    &#125;<br><br>    <span class="hljs-comment">//扩容</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSize</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.elem = Arrays.copyOf(<span class="hljs-keyword">this</span>.elem,<span class="hljs-keyword">this</span>.elem.length*<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否满了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.elem.length==usedSize) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//打印</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printList</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; usedSize; i++) &#123;<br>            System.out.print(elem[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//插入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            addSize();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&gt;usedSize)&#123;<br>            System.out.println(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = usedSize-<span class="hljs-number">1</span>; j &gt; i-<span class="hljs-number">1</span> ; j--) &#123;<br>            elem[j+<span class="hljs-number">1</span>] = elem[j];<br>        &#125;<br>        elem[i] = e;<br>        <span class="hljs-keyword">this</span>.usedSize++;<br>    &#125;<br>    <span class="hljs-comment">//末尾插入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            addSize();<br>        &#125;<br>        elem[usedSize] = e;<br>        <span class="hljs-keyword">this</span>.usedSize++;<br>    &#125;<br><br>    <span class="hljs-comment">//是否包含某个元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; usedSize; i++) &#123;<br>            <span class="hljs-keyword">if</span>(elem[i]==e) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//查找某个元素对应的位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">location</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; usedSize; i++) &#123;<br>            <span class="hljs-keyword">if</span>(elem[i] == e) <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//获取 pos 位置的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPosElem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span> || pos&gt;usedSize)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入位置不合法&quot;</span>);<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> elem[pos];<br>    &#125;<br><br>    <span class="hljs-comment">//改</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">editElem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span> || pos&gt;usedSize)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入位置不合法&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        elem[pos] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//删</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(pos&lt;<span class="hljs-number">0</span> || pos&gt;usedSize)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入位置不合法&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = pos; i &lt; usedSize-<span class="hljs-number">1</span>; i++) &#123;<br>            elem[i] = elem[i+<span class="hljs-number">1</span>];<br>        &#125;<br>        usedSize--;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ioutime</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/6/23 21:19</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SequenceList sequenceList = <span class="hljs-keyword">new</span> SequenceList();<br>        sequenceList.insert(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        sequenceList.insert(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>        sequenceList.insert(<span class="hljs-number">6</span>);<br>        sequenceList.insert(<span class="hljs-number">7</span>);<br>        sequenceList.insert(<span class="hljs-number">89</span>);<br>        System.out.println(sequenceList.contain(<span class="hljs-number">2</span>));<br>        System.out.println(sequenceList.location(<span class="hljs-number">4</span>));<br>        System.out.println(sequenceList.getPosElem(<span class="hljs-number">3</span>));<br>        System.out.println(sequenceList.editElem(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>));<br>        System.out.println(sequenceList.getPosElem(<span class="hljs-number">0</span>));<br>        System.out.println(sequenceList.del(<span class="hljs-number">0</span>));<br>        sequenceList.printList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-number">1</span><br><span class="hljs-number">7</span><br><span class="hljs-keyword">true</span><br><span class="hljs-number">9</span><br><span class="hljs-keyword">true</span><br><span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">89</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性表</tag>
      
      <tag>顺序表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2021/06/17/HTML/"/>
    <url>/2021/06/17/HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1、Html简介"><a href="#1、Html简介" class="headerlink" title="1、Html简介"></a>1、Html简介</h2><p>​    Html 是超文本标记语言；Hyper  Text   Markup    Language</p><p>​            可以传输出图片外，还有图像、视频、音频和动画等</p><p>​    W3C 标准：</p><p>​        World  Wide  Web  Consorttium(万维网联盟)</p><p>​        W3C包括了</p><p>​        1.结构化标准语言（Html、XML）</p><p>​        2.表现标准语言（CSS）</p><p>​        3.行为标准（DOM,ECMAScript)</p><h2 id="2、基本结构"><a href="#2、基本结构" class="headerlink" title="2、基本结构"></a>2、基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--**DOCTYPE**:告诉浏览器，我们要使用什么规范--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--head代表网页的头部--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--meta是描述性标签，用来描述网站的一些基本信息--&gt;</span><br>    <span class="hljs-comment">&lt;!--meta一般用来做SEO--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--title是网站的标题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!--body代表网页的主体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    基本结构<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、基本标签"><a href="#3、基本标签" class="headerlink" title="3、基本标签"></a>3、基本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--标题标签:h--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>3级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>4级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>5级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>6级标签<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--段落标签:p--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>기를 쓰고 사랑해야 하는 건 아냐<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>하루 정도는 행복하지 않아도 괜찮아<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>그럼에도 역시 완벽하군 나의 여인 um<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>여전히 무수한 빈칸들이 있지<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--换行标签:br--&gt;</span><br>기를 쓰고 사랑해야 하는 건 아냐<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>하루 정도는 행복하지 않아도 괜찮아<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>그럼에도 역시 완벽하군 나의 여인 um<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>여전히 무수한 빈칸들이 있지<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--水平线标签:hr--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--粗体、斜体:strong ,em--&gt;</span><br>粗体：<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>I love you<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>斜体：<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>I love you<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--特殊符号--&gt;</span><br>空格<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>结束 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>大于：<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>小于：<span class="hljs-symbol">&amp;lt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>版权符号： <span class="hljs-symbol">&amp;copy;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、图像标签"><a href="#4、图像标签" class="headerlink" title="4、图像标签"></a>4、图像标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图像标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--img标签讲解</span><br><span class="hljs-comment">        **src：图片地址</span><br><span class="hljs-comment">            相对地址，绝对地址</span><br><span class="hljs-comment">            ../  ----上一级目录</span><br><span class="hljs-comment">        **alt:当图片加载失败，会显示这个描述</span><br><span class="hljs-comment">        title:当鼠标悬停在图片上显示的文字</span><br><span class="hljs-comment">        width:图像宽度</span><br><span class="hljs-comment">        height:图像高度</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/973967.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;背景图片&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;悬停文字&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、链接标签"><a href="#5、链接标签" class="headerlink" title="5、链接标签"></a>5、链接标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>链接标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--页面间链接--&gt;</span><br><span class="hljs-comment">&lt;!--a标签</span><br><span class="hljs-comment">    **href: 要跳转到哪个页面</span><br><span class="hljs-comment">    target:表示窗口要在哪里打开</span><br><span class="hljs-comment">           _blank:在新标签中打开</span><br><span class="hljs-comment">           _self:在自己的网页中打开</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;基本标签.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>跳转到基本标签页面，在新的窗口打开<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/973967.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;picture&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--锚链接</span><br><span class="hljs-comment">1、需要一个锚标记</span><br><span class="hljs-comment">2、跳转到标记 #</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>top<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/image/973967.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;picture&quot;</span>  <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1000&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#top&quot;</span>&gt;</span>回到top<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--功能性标签</span><br><span class="hljs-comment">邮件属性：mailto</span><br><span class="hljs-comment">qq链接：</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!--邮件属性：mailto--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:ioutime@163.com&quot;</span>&gt;</span>邮箱地址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--qq链接：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://wpa.qq.com/pa?p=2::51&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;联系我获取资料&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;联系我获取资料&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6、块元素和行内元素</p><p>块元素:</p><ul><li>无论内容多少，该元素独占一行</li><li>例如（p，h1，h2，·····标签）</li></ul><p>行内元素：</p><ul><li>内容撑开宽度，左右都是行内元素的可以排在一行</li><li>例如( a,strong,em,·····）</li></ul><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><p>7.1、什么是列表：</p><p>​        列表就是信息资源的一种展示形式。它可以是信息结构化和条理化，并以列表的样式显示出来，以便浏        览者能够更快捷的获取相应的信息</p><p>7.2、列表的分类</p><ul><li>无序列表</li><li>有序列表</li><li>自定义列表</li></ul><p><img src="/img/picture/image-20210516173504958-1621157710086.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--有序列表 :or（Order List）</span><br><span class="hljs-comment">    应用范围：试卷，问答。······</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--无序列表：ur（unorder list)</span><br><span class="hljs-comment">    应用范围：导航，侧边栏····</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!--自定义列表：</span><br><span class="hljs-comment">    dl：标签</span><br><span class="hljs-comment">    dt：标签名称</span><br><span class="hljs-comment">    dd：列表内容</span><br><span class="hljs-comment">    应用范围：</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>学科<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>C/C++<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>98<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><p>8.1、为什么使用表格</p><p>​            简单通用；结构稳定</p><p>8.2、基本结构</p><ul><li>单元格</li><li>行</li><li>列</li><li>跨行</li><li>跨列</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--表格标签：table</span><br><span class="hljs-comment">    行：tr rows</span><br><span class="hljs-comment">    列：td</span><br><span class="hljs-comment">    跨行：rowspan</span><br><span class="hljs-comment">    跨列：colspan</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9、媒体元素"><a href="#9、媒体元素" class="headerlink" title="9、媒体元素"></a>9、媒体元素</h2><p>视频元素：</p><p>​    video</p><p>音频元素：</p><p>​    audio</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>媒体元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--音频和视频</span><br><span class="hljs-comment">    src：资源路径</span><br><span class="hljs-comment">    controls:控制条</span><br><span class="hljs-comment">    autoplay:自动播放</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/audio/音频.mp3&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> &gt;</span>音频<span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--&lt;video muted src=&quot;../resources/video/视频.mp4&quot; controls autoplay&gt;视频&lt;/video&gt;--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">autoplay</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../resources/video/视频.mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10、页面结构分析"><a href="#10、页面结构分析" class="headerlink" title="10、页面结构分析"></a>10、页面结构分析</h2><table><thead><tr><th align="center">元素名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">标题头部区域的内容（用于页面和页面中的一块区域）</td></tr><tr><td align="center">footer</td><td align="center">标记脚部区域的内容（用于整个页面或页面的一块区域）</td></tr><tr><td align="center">section</td><td align="center">Web页面中的一块独立区域</td></tr><tr><td align="center">article</td><td align="center">独立的文章内容</td></tr><tr><td align="center">aside</td><td align="center">相关内容或应用</td></tr><tr><td align="center">nav</td><td align="center">导航类辅助内容</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页结构分析<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--header--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页头部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-comment">&lt;!--section--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页的主体<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!--footer--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页脚部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="11、iframe内联框架"><a href="#11、iframe内联框架" class="headerlink" title="11、iframe内联框架"></a>11、iframe内联框架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>iframe<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--iframe:    src:地址    w-h：宽高--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;路飞&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../resources/video/海贼王混剪.mp4&quot;</span>  <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;路飞&quot;</span>&gt;</span>路飞<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="12、post和get提交"><a href="#12、post和get提交" class="headerlink" title="12、post和get提交"></a>12、post和get提交</h2><h3 id="12-1、表单语法"><a href="#12-1、表单语法" class="headerlink" title="12.1、表单语法"></a>12.1、表单语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-comment">&lt;!--表单form：    **action:表单提交的位置    **method：post,get提交方式            get方式提交：我们可以在url中看到我们提交的信息，不安全，高校            post：比较安全，传输大文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;iframe.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--文本框--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-comment">&lt;!--输入框--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-comment">&lt;!--提交和重置--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;清除&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="12-2、表单元素格式"><a href="#12-2、表单元素格式" class="headerlink" title="12.2、表单元素格式"></a>12.2、表单元素格式</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">指定元素类型(text ,password,radio,checkbox,submit,reset,file,hidden,imageh和button…)，默认为text</td></tr><tr><td align="left">name</td><td align="left">指定表单元素的名称</td></tr><tr><td align="left">value</td><td align="left">元素的初始值，type为radio时必须指定一个值</td></tr><tr><td align="left">size</td><td align="left">指定表单元素的初始宽度。当type为text或password时，表单元素的大小以字符为单位。对于其他类型，宽度是以像素为单位。</td></tr><tr><td align="left">maxlength</td><td align="left">type为text或password时，输入的最大字符数。</td></tr><tr><td align="left">checked</td><td align="left">type为radio或checkbox时，指定按钮是否被选中</td></tr></tbody></table><h3 id="12-3、表单元素类型"><a href="#12-3、表单元素类型" class="headerlink" title="12.3、表单元素类型"></a>12.3、表单元素类型</h3><ol><li>文本输入框</li><li>密码框</li><li>单选框</li><li>多选框</li><li>按钮</li><li>下拉框</li><li>列表框</li></ol>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记</title>
    <link href="/2021/04/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="基本概念与常识"><a href="#基本概念与常识" class="headerlink" title="基本概念与常识"></a>基本概念与常识</h2><h3 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h3><ul><li><p>简单易学</p></li><li><p>面向对象（封装、多态、继承）</p></li><li><p>分布式</p></li><li><p>健壮性</p></li><li><p>安全性</p></li><li><p>可移植性(java的虚拟机)</p></li><li><p>解释型</p></li><li><p>高性能</p></li><li><p>多线程</p></li><li><p>动态性</p></li></ul><h3 id="JVM、JDK、JRE"><a href="#JVM、JDK、JRE" class="headerlink" title="JVM、JDK、JRE"></a>JVM、JDK、JRE</h3><ul><li><p>JVM：Java的虚拟机，是运行Java字节码的虚拟机。JVM有针对不同操作系统的特定实现，目的是生成相同的字节码。</p></li><li><p>字节码：JVM 可以理解的代码，也就是我们看到的 文件名.class 的文件。字节码不面向任何特定的处理器，只面向JVM。</p></li><li><p>源码到运行的过程，如下</p><p>.java的源文件    —-JDK中的javac编译–&gt;  .class文件    —–JVM—&gt;  二进制机器码</p></li><li><p>JDK：全称Java Development Kit , 它是功能齐全的Java SDK （软件开发工具包）。它拥有 JRE 所拥有的一切，还有 编译器（javac） 和 工具（如：javadoc 和 jdb)。可以创建和编译程序</p></li><li><p>JRE： 全称 Java Runtime Environment，Java运行时的环境,包括了 JAM 、 Java类库 、java命令和其他的一些基础构件。但是，他不能用于创建新程序。</p></li></ul><p>总的来说，JDK &gt; JRE &gt; JVM</p><h3 id="JAVA-语言“编译与解释并存”"><a href="#JAVA-语言“编译与解释并存”" class="headerlink" title="JAVA 语言“编译与解释并存”?"></a>JAVA 语言“编译与解释并存”?</h3><p>编译型：一次性将源码翻译成机器码，然后在执行；</p><p>解释型：一边编译一边运行</p><p>java语言也具有编译型语言的特点，Java的源程序要先编译成字节码，然后进行解释。</p><h3 id="Oracle-JDK-和-Open-JDK"><a href="#Oracle-JDK-和-Open-JDK" class="headerlink" title="Oracle JDK 和 Open JDK"></a>Oracle JDK 和 Open JDK</h3><ul><li><p>Oracle JDK 不是完全开源；Open JDK 是开源的；</p></li><li><p>Oracle JDK 比 Opea JDK 更稳定</p></li><li><p>在响应性和JVM性能方面，Oracle　JDK更好一点</p></li></ul><h3 id="import-java-和-javax有什么区别"><a href="#import-java-和-javax有什么区别" class="headerlink" title="import java 和 javax有什么区别"></a>import java 和 javax有什么区别</h3><p>刚开始的JavaAPI 所必需的包是Java开头的包，Javax 当时只是用来扩展API的。</p><p>后来，javax 逐渐成为 Java API 的组成部分。由于移动麻烦，最终 javax 包成为标准API的一部分</p><p>所以，java和javax 没什么区别。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="字符型常量和字符串常量有什么区别"><a href="#字符型常量和字符串常量有什么区别" class="headerlink" title="字符型常量和字符串常量有什么区别"></a>字符型常量和字符串常量有什么区别</h3><ul><li>形式 ：’ a ‘      “aaaaa”</li><li>含义：相当于一个整型值（ASCII 值），可以运算； 代表一个地址值</li><li>内存大小：2个字节   ； 若干个字节</li></ul><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li></ul><h3 id="标识符、关键字"><a href="#标识符、关键字" class="headerlink" title="标识符、关键字"></a>标识符、关键字</h3><p>标识符：自己取的名字</p><p>关键字：Java 语言已经赋予了其特殊含义，只能用于特定的地方，特殊的标识符</p><h3 id="Java泛型，类型擦除"><a href="#Java泛型，类型擦除" class="headerlink" title="Java泛型，类型擦除"></a>Java泛型，类型擦除</h3><p>泛型使用方式</p><ul><li>泛型类</li><li>泛型接口</li><li>泛型方法</li></ul><p>泛型：本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>Java的泛型是伪泛型，在java编译期间，所有的泛型信息都会擦除，就是<strong>类型擦除</strong></p><h3 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals 的区别"></a>== 和 equals 的区别</h3><ul><li>==是对基本数据类型是值比较， 对引用数据类型，比较的是对象的内存地址。</li><li>equals() 只能用于判断对象是否相等</li></ul><p>equals()方法的使用存在两种情况</p><ul><li>类没有重写equals()方法：等价于使用 “==” 比较两个对象</li><li>类重写了equals() 方法：</li></ul><h3 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode() 与 equals()"></a>hashCode() 与 equals()</h3><ul><li><p>hashCode()：作用是获取哈希码，也称散列码。它实际上返回一个<strong>int</strong>整数</p><ul><li>哈希码作用：确定该对象在哈希表中的索引位置</li><li>hashCode()：可以减少equals的使用次数，提高执行速度</li></ul></li><li><p>重写equals 时要重写 hashCode 方法</p><p>   <strong>两个相等的对象必须具有相等的散列码（Java关键约定）</strong></p><p>​        </p></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="基本数据类型、包装类型、字节"><a href="#基本数据类型、包装类型、字节" class="headerlink" title="基本数据类型、包装类型、字节"></a>基本数据类型、包装类型、字节</h3><table><thead><tr><th align="center">基本数据类型</th><th align="center">字节</th><th align="center">包装类型（引用类型）</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">Long</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">Short</td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">Byte</td></tr><tr><td align="center">char</td><td align="center">2</td><td align="center">Character</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">-</td><td align="center">Boolean</td></tr></tbody></table><h3 id="自动装箱、拆箱"><a href="#自动装箱、拆箱" class="headerlink" title="自动装箱、拆箱"></a>自动装箱、拆箱</h3><ul><li><p>装箱：将基本类型自动转化为对应的引用类型</p></li><li><p>拆箱：将包装类型转换位基本类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">装箱:Integer i = <span class="hljs-number">9</span>;   ===== Integer i = Integer.valueOf(<span class="hljs-number">9</span>);<br>拆箱:<span class="hljs-keyword">int</span> n = i;       ===== <span class="hljs-keyword">int</span> n = i.intValue();<br></code></pre></td></tr></table></figure><p><strong>注：包装类型比较是否相等，要哟equals()方法</strong></p><h2 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h2><h3 id="String-、StringBuilder、StringBuffer"><a href="#String-、StringBuilder、StringBuffer" class="headerlink" title="String 、StringBuilder、StringBuffer"></a>String 、StringBuilder、StringBuffer</h3><ul><li>String：String的值被创建后不能修改，任何修改都会引发新的String对象的生成</li><li>StringBuffer：和String 类似，但是值是可以被修改的，使用 synchronized来保证线程安全</li><li>StringBuilder：非线程安全</li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射指的在运行状态中， 对于任意一个类都能知道这个类所有的属性和方法；平且对于任意一个对象，都能调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能称为反射机制。</p><h3 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h3><p>数据分为基本数据类型和引用数据类型。</p><p>基本数据类型：数据是直接存放在栈中的</p><p>引用数据类型：存放在栈中的是对象的引用地址，真实的对象存放在堆内存中</p><p>浅拷贝：对于基本数据类型，直接复制其数据；对于引用数据类型，拷贝的是其对象的引用地址，新旧对象指向的相同的内存地址，无论修改哪个，另一个一会改变</p><p>深拷贝：对于基本数据类型，直接复制其数据；对于引用数据类型，深拷贝是在内存中开辟新的空间，在新的内存空间中复制一个一模一样的对象，新老对象不共享内存，修改一个不会修改另一个。</p><h3 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h3><p>并发：两个或两个以上事件在同一时间间隔内发生。</p><p>并行：两个或两个以上事件在同一时刻发生</p><h3 id="构造器不可以被重写"><a href="#构造器不可以被重写" class="headerlink" title="构造器不可以被重写"></a>构造器不可以被重写</h3><p>Constructor 不能被重写（Override) ，但是可以被 重载（overload）</p><h3 id="Java只有值传递，对于对象参数，值得内容是对象的引用。"><a href="#Java只有值传递，对于对象参数，值得内容是对象的引用。" class="headerlink" title="Java只有值传递，对于对象参数，值得内容是对象的引用。"></a>Java只有值传递，对于对象参数，值得内容是对象的引用。</h3><h3 id="静态变量-和-成员变量"><a href="#静态变量-和-成员变量" class="headerlink" title="静态变量 和 成员变量"></a>静态变量 和 成员变量</h3><ul><li><p>静态变量存放在方法区中；成员变量存放在堆内存中</p></li><li><p>静态变量与 类 共存亡；成员变量与 对象 共存亡</p></li><li><p>静态变量属于类；成员变量属于对象</p></li><li><p>静态变量可以被对象调用，也可以被类名调用；成员变量只能被对象调用。</p></li></ul><h3 id="静态方法内部-能否发出对-非静态方法的调用"><a href="#静态方法内部-能否发出对-非静态方法的调用" class="headerlink" title="静态方法内部 能否发出对 非静态方法的调用"></a>静态方法内部 能否发出对 非静态方法的调用</h3><ul><li>如何没用显示创建对象的实例，则不可以调用。</li><li>显示的创建对象实例，可以调用。</li></ul><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3><p>方法的重载和重写都是实现多态的方式，重载是编译时的多态性，重写时运行时的多态性。</p><ul><li>重载：overload，一个类中有多个相同名字的方法，但是具有不同的参数列表（参数类型不同、参数个数不同或两者都不一样）</li><li>重写：override，发生在父类和子类之间，子类对父类的方法进行重写，参数不能改变，返回值可以修改，但必须时父类返回值的派生类。</li></ul><h3 id="abstract-class-抽象类-和-interface-接口"><a href="#abstract-class-抽象类-和-interface-接口" class="headerlink" title="abstract class (抽象类) 和 interface (接口)"></a>abstract class (抽象类) 和 interface (接口)</h3><ul><li><p>抽象类只能单继承；接口可以多实现</p></li><li><p>抽象类可以有构造方法；接口不能有</p></li><li><p>抽象类中可以有成员变量；接口中没有，只能时常量（默认 public static final)</p></li><li><p>抽象类中可以包含非抽象方法；在java 7 之前 接口中所有方法都是抽象的，在Java 8之后</p><p>接口支持非抽象方法：default 方法、静态方法等。Java 9 支持稀有方法，稀有静态方法</p></li><li><p>抽象类中的抽象方法可以是任意修饰符；Java 8之前接口方法只有public类型，在Java9之后支持private</p></li><li><p>接口时自上而下的，接口规范了某些行为，是对一行为的抽象；抽象类是自下而上的抽象过程，抽象类提供了通用实现，是对某一类事物的抽象。</p></li></ul><h3 id="Error-和-Exception-的区别"><a href="#Error-和-Exception-的区别" class="headerlink" title="Error  和  Exception 的区别"></a>Error  和  Exception 的区别</h3><ul><li>Error  和  Exception 都是 Throwable  的子类，用于表示程序不正常情况</li><li>Error 表示系统级的错误和程序不必处理的异常。</li><li>Exception 表示需要捕捉或者需要程序进行处理的异常，是一种设计和实现的问题。</li></ul><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul><li>修饰类：该类不能派生出新的子类，不能作为父类被继承；一个类不能同时被声明为abstract 和 final</li><li>修饰方法：该方法的子类不能被重写</li><li>修饰变量：该变量必须在声明时给定初始值，不能再被修改，只能被读取；如果该变量是对象，则指的是引用不可改变，但是对象的属性还是可以修改的。</li></ul><h3 id="finally、finalize"><a href="#finally、finalize" class="headerlink" title="finally、finalize"></a>finally、finalize</h3><ul><li>finally：是对java异常处理机制的最佳补充，通常配合try 、catch使用。通常用于释放锁、数据库连接等资源。</li><li>finalize：是Object 中的方法，在垃圾收集器将对象从内存中清除出去之前必须要的清理工作。finalize()方法在java 9 之后被弃用。</li></ul><h3 id="try、catch、finally"><a href="#try、catch、finally" class="headerlink" title="try、catch、finally"></a>try、catch、finally</h3><p>在return 之前，会保存要返回的值，然后执行 finally中的语句（如果finally中有retrun 则结束，不会再回到之前的return中。）</p><h3 id="Java-1-8-之后的特性"><a href="#Java-1-8-之后的特性" class="headerlink" title="Java 1.8 之后的特性"></a>Java 1.8 之后的特性</h3><p>接口默认方法：Java 8 之后允许我们给接口添加一个非抽象的方法实现，只需要使用default关键字</p><p>Lambda 表达式和函数式接口：本质是一段匿名内部类，也可以是一段可以传递的代码</p><p>Stream API ：</p><p>方法引用：</p><p>日期时间API：</p><p>Optional 类：</p><p>新工具：新的编译工具</p><h3 id="wait-和-sleep-方法"><a href="#wait-和-sleep-方法" class="headerlink" title="wait() 和 sleep() 方法"></a>wait() 和 sleep() 方法</h3><ul><li>wait() 来自 Object 类；sleep() 来自 Thread 类</li><li>wait() 会释放同步锁，让其它线程进入synchronized代码块执行；sleep() 不会释放同步锁</li><li>wait() 只能在同步控制方法或块中里面才能使用，否则会报错IllegalArgumentException</li><li>wait()需要其他线程掉用同一对象的notify()/notifyAll() 才能恢复；sleep()在时间到了之后会自动恢复</li></ul><h3 id="线程的sleep-方法和yield-方法"><a href="#线程的sleep-方法和yield-方法" class="headerlink" title="线程的sleep()方法和yield()方法"></a>线程的sleep()方法和yield()方法</h3><p>线程执行sleep() 方法之后进入超时等待（TIMED_WAITING）状态；执行yield() 方法进入就绪等待</p><ul><li>sleep() 方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程运行的机会</li><li>yield()方法只会给相同优先级或更高的优先级的线程以运行的机会</li></ul><h3 id="线程的-join-方法"><a href="#线程的-join-方法" class="headerlink" title="线程的 join() 方法"></a>线程的 join() 方法</h3><p>用于等待当前线程终止。</p><h3 id="多线程程序的实现"><a href="#多线程程序的实现" class="headerlink" title="多线程程序的实现"></a>多线程程序的实现</h3><ul><li>继承Thread 类，重写run() 方法，无返回值void</li><li>实现Runnable 接口，重写 run() 方法，无返回值void</li><li>实现Callable 接口</li></ul><h3 id="Thread-调用-start-方法和-run-方法"><a href="#Thread-调用-start-方法和-run-方法" class="headerlink" title="Thread 调用 start() 方法和 run() 方法"></a>Thread 调用 start() 方法和 run() 方法</h3><p>run() ：普通方法的调用，在主线程中执行，不会创建一个线程来执行</p><p>start()：启动一个新的线程，这是这个线程处于就绪态，一但的到cpu的时间片，就开始执行run()方法</p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p><img src="/img/picture/view.jpg"></p><ul><li><p>初始（NEW)：新建但是没有调用start()方法</p></li><li><p>运行（RUNNABLE)：包含就绪（READY）和 运行中（RUNNING）</p><ul><li><p>就绪（READY)：调用start() 方法，等待获取时间片</p></li><li><p>运行中（RUNNING)：获取到时间片</p><p>就绪  &lt;——系统调度（yield）—–&gt; 运行中</p></li></ul></li><li><p>阻塞（BLOCKED）：</p></li><li><p>等待（WAITING)：</p></li><li><p>超时等待（TIMED_WAITING）：</p></li><li><p>终止（TERMINATED）：</p></li></ul><p>​    </p><h3 id="synchronized-和-Lock-的区别"><a href="#synchronized-和-Lock-的区别" class="headerlink" title="synchronized 和 Lock 的区别"></a>synchronized 和 Lock 的区别</h3><ul><li>Lock是一个接口；synchronized是Java中的关键字</li><li>Lock在发生异常，如果没有主动通过unLock() 去释放锁，会造成死锁；synchronized则不会；</li><li>Lock的使用更加灵活，有响应中断、超时时间；</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>互斥条件：一段时间内某资源只能被一个线程占用</li><li>请求和保持条件：进程已经获得一个资源，但又对另一个资源发出请求，而该资源被另一个进程占用</li><li>不可抢占条件：不可强制剥夺</li><li>环路等待条件</li></ul><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>常用线程池（线程池是一个典型的“用空间换时间”的应用案例）</p><ul><li>FixedThreadPool:线程数固定的线程池</li><li>SingleThreadExecutor：线程数量为1的线程池</li><li>CachedThreadPool：缓存线程池</li></ul><p>使用：ExecutorService是所有的线程池都实现了的接口，用这个接口可以定义句柄</p><p>​           Executors类用于创建不同种类的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个有5个线程的线程池</span><br>ExecutorService fixedTP = Executors.newFixedThreadPool(<span class="hljs-number">5</span>); <br>ExecutorService singleTE = Executors.newSingleThreadExecutor();<br>ExecutorService cachedTP = Executors.newCachedThreadPool();<br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>降低资源消耗</li><li>提高响应速度</li><li>增加线程的可管理性</li></ul><p>核心属性：</p><ul><li>threadFactory(线程工厂)：</li><li>corePoolSize(核心线程数)：</li><li>workQueue（队列）：</li><li>handler（ 拒绝策略）：</li><li>keepAliveTime（保持存活时间）：</li></ul><p>拒绝策略</p><ul><li>AbortPolicy：中止策略，默认的，使用该策略会抛出异常，阻止系统继续运行</li><li>DiscardPolicy：抛弃策略，什么都不做，直接抛弃拒绝的任务</li><li>DiscardOldestPolicy：抛弃最老策略，抛弃阻塞队列中最老的任务</li><li>CallerRunsPolicy：调用者运行策略，</li></ul><p>工作流程：</p><ol><li>调用Excutors类的静态方法newCachedThreadPool 或 newFixedThreadPool</li><li>调用submit 提交 Runnable 或 Callable 对象</li><li>保存好返回的Future 对象，以便得到结果或取消任务</li><li>但不想再提交任何任务时，调用shutdown</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
